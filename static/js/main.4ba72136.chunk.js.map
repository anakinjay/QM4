{"version":3,"sources":["reducers/questionReducer.tsx","components/questionImport/questionImport.tsx","components/quizOptions/quizOptions.tsx","components/scoreBar/scoreBar.tsx","components/quizTimer/QuizTimer.tsx","quizResults/QuizResults.tsx","components/questionPanel/questionPanel.tsx","components/questionList/questionList.tsx","components/questionDisplay/questionDisplay.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["parseFile","file","lines","split","questions","length","qflag","aflag","eflag","aline","question","questionText","correctAnswer","answers","i","substr","toUpperCase","push","Number","questionState","attempted","correct","lastQuestion","begin","timeleft","questionsleft","qcomplete","questionEl","timerEl","questionReducer","state","action","qmcor","localStorage","getItem","qmtotal","type","payload","console","log","message","Message","title","description","setItem","parseInt","toString","QuestionImport","props","useSelector","useDispatch","QuizOptions","dispatch","useRef","questionsEl","className","Grid","fluid","Row","Col","xs","sm","md","InputNumber","onChange","e","ref","prefix","postfix","defaultValue","max","min","step","value","Button","onClick","time","color","ScoreBar","quizOp","restart","src","input","document","createElement","onchange","reader","FileReader","readAsText","target","files","onload","result","click","loadFile","QuizTimer","React","useState","counter","setCounter","useEffect","setTimeout","style","fontSize","Math","round","QuizResults","useWindowSize","width","height","recycle","fontWeight","QuestionPanel","qtext","map","item","key","feedback","timer","score","ablocks","Panel","shaded","QuestionList","rnum","ceil","floor","random","QuestionDisplay","App","Boolean","window","location","hostname","match","questMasterStore","createStore","composeWithDevTools","ReactDOM","render","store","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sQAgBMA,EAAY,SAACC,GAkBf,IAdA,IAAIC,EAAQD,EAAKE,MAAM,MACnBC,EAA2B,CAACA,UAAU,IACtCC,EAASH,EAAMG,OACfC,GAAQ,EACRC,GAAQ,EACRC,GAAQ,EACRC,EAAQ,EAERC,EAAoB,CACpBC,aAAa,GACbC,cAAc,EACdC,QAAS,IAGLC,EAAI,EAAGA,EAAIT,EAAQS,GAAG,EAE1B,GAA4B,KAAxBZ,EAAMY,GAAGC,OAAO,EAAE,GACtB,OAAOb,EAAMY,GAAGC,OAAO,EAAE,GAAGC,eACxB,IAAK,KAC6B,GAA1BN,EAASE,eAAsBF,EAASG,QAAQR,OAAS,GAA8B,IAAzBK,EAASC,cACvEP,EAAUA,UAAUa,KAAKP,GAG5BA,EAAW,CACRC,aAAa,GACbC,cAAc,EACdC,QAAS,IAGbP,GAAQ,EACRC,GAAQ,EACRC,GAAQ,EAER,MACJ,IAAK,KACDC,EAAQ,EACRH,GAAQ,EACRC,GAAQ,EACRC,GAAQ,EACR,MACJ,IAAK,KACDF,GAAQ,EACRC,GAAQ,EACRC,GAAQ,EACR,MACJ,QACQF,EACAI,EAASC,aAAeD,EAASC,aAAe,KAAOT,EAAMY,GACtDP,EACM,GAATE,GACAC,EAASE,cAAiBM,OAAOhB,EAAMY,IAAI,EAC3CL,EAAQ,GAERC,EAASG,QAAQI,KAAKf,EAAMY,IAIzBN,IACPJ,EAAUA,UAAUa,KAAKP,GACzBA,EAAW,CACPC,aAAa,GACbC,cAAc,EACdC,QAAS,IAEbL,GAAQ,GAWzB,OAAOJ,GAKJe,EAAuC,CACzCf,UAFmB,GAGnBgB,UAAU,EACXC,QAAQ,EACRC,cAAa,EACbC,OAAM,EACNC,SAAS,IACTC,cAAc,GACdC,WAAU,EACVC,WAAW,GACXC,QAAQ,IAyFQC,MAjFZ,WAGsB,IAFzBC,EAEwB,uDAFOX,EAC/BY,EACwB,uCAEpBC,EAAQC,aAAaC,QAAQ,aAC7BC,EAAUF,aAAaC,QAAQ,WAMnC,OAAQH,EAAOK,MACX,IAAK,cACD,OAAO,eAAKN,EAAZ,CAAmBF,QAAQG,EAAOM,QAASb,SAA4B,GAAjBO,EAAOM,UAEjE,IAAK,kBACD,OAAO,eAAKP,EAAZ,CAAmBH,WAAWI,EAAOM,QAASZ,cAAeM,EAAOM,UAExE,IAAK,YACD,OAAO,eAAKP,EAAZ,CAAmBL,cAAeK,EAAMH,WAAYH,SAA0B,GAAhBM,EAAMF,QAAeN,cAAa,EAAQC,OAAM,EAAMG,WAAU,IAElI,IAAK,cAED,OADAY,QAAQC,IAAI,mBACL,eAAKT,EAAZ,CAAmBT,QAAS,EAAEC,cAAa,EAAOF,UAAU,EAAGG,OAAO,EAAOG,WAAU,IAE3F,IAAK,eACD,OAAO,eAAKI,EAAZ,CAAmBR,cAAc,EAAOC,OAAO,EAAOG,WAAW,IAErE,IAAK,eAED,IAAItB,EAAYJ,EAAU+B,EAAOM,SAEjC,OAAO,eAAIP,EAAX,CAAiBV,UAAU,EAAGC,QAAQ,EAAGjB,UAAUA,EAAUA,YAEjE,IAAK,mBAGD,IAAIiB,EAAU,EACVC,EAAe,CACbkB,QAAS,kBAACC,EAAA,EAAD,CAASL,KAAK,QAAQM,MAAM,QAAQC,YAAa,uBAAuBZ,EAAOM,QAAQzB,iBAE3E,WAAvBmB,EAAOM,QAAQD,OACff,EAAU,EAEG,MAATW,EACAC,aAAaW,QAAQ,aAAcC,SAASb,GAAS,GAAGc,YAExDb,aAAaW,QAAQ,YAAa,KAKtCtB,EAAakB,QAAU,kBAACC,EAAA,EAAD,CAASL,KAAK,UAAUM,MAAM,UAAUC,YAAa,gBAMjE,MAAXR,EACAF,aAAaW,QAAQ,WAAYC,SAASV,GAAW,GAAGW,YAExDb,aAAaW,QAAQ,UAAW,KAEpBX,aAAaC,QAAQ,aACvBD,aAAaC,QAAQ,WADnC,IAEIX,GAAQ,EACRG,GAAY,EAMhB,OALII,EAAML,cAAgB,IACtBF,GAAQ,EACRG,GAAY,GAGT,eAAKI,EAAZ,CAAkBP,MAAMA,EAAOG,UAAUA,EAAWD,cAAgBK,EAAML,cAAgB,EAAIH,aAAaA,EAAcF,UAAUU,EAAMV,UAAW,EAAGC,QAAQS,EAAMT,QAASA,IACpL,QACE,OAAOS,ICtKAiB,G,OArBQ,SAACC,GACEC,aAAY,SAAAnB,GAAK,OAAIA,KAC1BoB,cAajB,OACI,gC,oDChBO,SAASC,IACtB,IAAMhC,EAAqB8B,aAAY,SAAAnB,GAAK,OAAIA,KAC1CsB,EAAWF,cACXtB,EAAUyB,iBAAO,MACjBC,EAAcD,iBAAO,MAU3B,OAAQ,yBAAKE,UAAU,aACnB,kBAACC,EAAA,EAAD,CAAMC,OAAK,GACT,kBAACC,EAAA,EAAD,CAAKH,UAAU,aACb,kBAACI,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GACzB,kBAACC,EAAA,EAAD,CAAaC,SAAU,SAACC,GAEtBb,EAAS,CAAEhB,KAAM,cAAeC,QAAS4B,KAEtCC,IAAKtC,EAASuC,OAAQ,aAAcC,QAAS,UAAWC,aAAclD,EAAcS,QAAS0C,IAAK,IAAMC,IAAK,EAAGC,KAAM,KAE3H,kBAACb,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GACzB,kBAACC,EAAA,EAAD,CAAaC,SAAU,SAACC,GAErBb,EAAS,CAAEhB,KAAM,kBAAmBC,QAAS4B,KAI9CC,IAAKZ,EAAaa,OAAQ,MAAOC,QAAS,YAAaK,MAAOtD,EAAcQ,WAAY2C,IAAK,IAAOC,IAAK,EAAGC,KAAM,KAEpH,kBAACb,EAAA,EAAD,CAAKC,GAAI,GAAIC,GAAI,GAAIC,GAAI,GACzB,kBAACY,EAAA,EAAD,CAAQC,QAAS,WACfvB,EAAS,CAAEhB,KAAM,YAAaC,QAAS,CAAEuC,KAAM,IAAKxE,UAAW,QAC9DyE,MAAM,SAFT,mBCjCV,IAsEeC,EAtEE,SAAC9B,GAEd,IAAM7B,EAAoB8B,aAAY,SAAAnB,GAAK,OAAIA,KACzCsB,EAAWF,cAwBwB,MAArCjB,aAAaC,QAAQ,cACrBD,aAAaW,QAAQ,YAAY,KAEE,OAAnCX,aAAaC,QAAQ,YACrBD,aAAaW,QAAQ,UAAW,KAKpC,IAAImC,EAAS,8BACTC,EAAU,8BAcd,OAbI7D,EAAcf,UAAUC,OAAS,GAA4B,GAAvBc,EAAcI,QACpDwD,EAAS,kBAAC5B,EAAD,OAEThC,EAAcf,UAAUC,OAAS,GAA4B,GAAvBc,EAAcI,QACpDyD,EAAU,kBAACN,EAAA,EAAD,CAAQC,QAAS,SAACV,GAExBb,EAAS,CAAEhB,KAAM,cAAeC,SAAS,MAFnC,iBAUV,6BACI,kBAACmB,EAAA,EAAD,CAAMC,OAAK,GACP,kBAACC,EAAA,EAAD,CAAKH,UAAU,YACf,kBAACI,EAAA,EAAD,CAAMC,GAAI,GAAG,yBAAKL,UAAU,SAAS0B,IAAI,gBAErC,kBAACtB,EAAA,EAAD,CAAKC,GAAI,GAAT,kBAA4BzC,EAAcE,QAA1C,IAAoDF,EAAcC,UAAlE,uBAAiGa,aAAaC,QAAQ,aAAtH,MAAuID,aAAaC,QAAQ,WAA5J,KACA,kBAACyB,EAAA,EAAD,CAAKC,GAAI,GAAI,kBAACc,EAAA,EAAD,CAAQC,QAAS,SAACV,GAAD,OArD7B,WACb,IAAIiB,EAAQC,SAASC,cAAc,SACnCF,EAAM9C,KAAO,OACb8C,EAAMG,SAAW,SAACpB,GAEd,IAAIqB,EAAS,IAAIC,WACjBD,EAAOE,WAAWvB,EAAEwB,OAAOC,MAAM,IAEjCJ,EAAOK,OAAO,SAAC1B,GAEXb,EAAS,CAAChB,KAAK,eAAeC,QAAQ4B,EAAEwB,OAAOG,WAMvDV,EAAMW,QAqC2CC,KAAxB,sBAAb,KACA,kBAACnC,EAAA,EAAD,CAAKC,GAAI,GAAKoB,EAAd,OAEJ,kBAACtB,EAAA,EAAD,KACKqB,M,kBChEN,SAASgB,IACpB,IAAM5E,EAAqB8B,aAAY,SAAAnB,GAAK,OAAIA,KAC5CsB,EAAWF,cAFiB,EAGJ8C,IAAMC,SAAS9E,EAAcK,UAHzB,mBAG3B0E,EAH2B,KAGlBC,EAHkB,KAgBlC,OAZEH,IAAMI,WAAU,WACVF,EAAU,GAAK/E,EAAcI,MAC9B8E,YAAW,kBAAMF,EAAWD,EAAU,KAAI,KAE3C9C,EAAS,CAAEhB,KAAM,eAAgBC,QAAS,SAO3C,CAAC6D,IAEJ,6BACE,kBAACzD,EAAA,EAAD,CACEL,KAAK,OACLM,MAAM,YACNC,YACE,2BACE,yBAAK2D,MAAO,CAAEC,SAAU,SAAWC,KAAKC,MAAOP,EAAU,GAAM,IAAM,GAArE,gB,wCCtBG,SAASQ,IACtB,IAAMvF,EAAqB8B,aAAY,SAAAnB,GAAK,OAAIA,KADZ,EAEV6E,MAAlBC,EAF4B,EAE5BA,MAAOC,EAFqB,EAErBA,OACf,OACE,6BACE,kBAAC,IAAD,CACAC,SAAS,EACPF,MAAOA,EACPC,OAAQA,IAEV,yBAAKP,MAAO,CAACC,SAAS,SAAtB,mBANF,eAQepF,EAAcE,QAR7B,IAQuCF,EAAcC,UACnD,yBAAKkF,MAAO,CAAEC,SAAU,OAAQQ,WAAW,SAA3C,IAA6H,GAArEP,KAAKC,MAAOtF,EAAcE,QAAUF,EAAcC,UAAa,IAAvH,MCbN,IAyDe4F,EAzDO,SAAChE,GACnB,IAAM7B,EAAoB8B,aAAY,SAAAnB,GAAK,OAAIA,KACzCsB,EAAWF,cAGjBZ,QAAQC,IAAIS,EAAMtC,UAClB,IAAIuG,EAAQjE,EAAMtC,SAASC,aAAaR,MAAM,MAAM+G,KAAI,SAACC,EAAMrG,GAC3D,OAAO,uBAAGsG,IAAKtG,GAAIqG,MAGnBE,EAAW,8BACXC,EAAQ,8BACRC,EAAQ,8BACRpG,EAAcG,cAAuC,GAAvBH,EAAcI,QAC5C8F,EAAW,6BAAMlG,EAAcG,aAAakB,SAC5C8E,EAAQ,kBAACvB,EAAD,OAGe,GAAvB5E,EAAcI,OAAkBJ,EAAcO,YAC9C6F,EAAQ,kBAACb,EAAD,OAIZ,IAAIc,EAAUxE,EAAMtC,SAASG,QAAQqG,KAAI,SAACjD,EAAGnD,GACzC,IAAIuB,EAAU,CACVD,KAAK,YACLxB,cAAeoC,EAAMtC,SAASG,QAAQmC,EAAMtC,SAASE,gBAK7D,OAHQE,GAAKkC,EAAMtC,SAASE,gBACpByB,EAAQD,KAAO,WAEhB,kBAACuB,EAAA,EAAD,CAAKyD,IAAKtG,GAAG,kBAAC2G,EAAA,EAAD,CAAOlE,UAAU,cAAcmE,QAAM,EAACN,IAAKtG,EAAI6D,QAAS,SAACV,GAAD,OAAKb,EAAS,CAAChB,KAAK,mBAAmBC,QAAQA,MAAY4B,OAKvI,OACI,6BACI,kBAACwD,EAAA,EAAD,KACCH,EACAD,EACAE,EACG,0BAAMhE,UAAU,gBACnB0D,GAED,kBAACzD,EAAA,EAAD,KACQ,kBAACE,EAAA,EAAD,KACG8D,OCxCvB,IAkCeG,EAlCM,WACAzE,cAAjB,IARkBqB,EAAKD,EASjBnD,EAAoB8B,aAAY,SAAAnB,GAAK,OAAIA,KAG3C1B,EAAY,CACZ,CAACO,aAAa,8BAA+BE,QAAQ,GAAIQ,QAAQ,IAIjEuG,EAAO,EAgBX,OAfIzG,EAAcf,UAAUC,OAAS,GAAKc,EAAcI,QACpDnB,EAAYe,EAAcf,UAnBZmE,EAoBM,EApBDD,EAoBInD,EAAcf,UAAUC,OAnBnDkE,EAAMiC,KAAKqB,KAAKtD,GAChBD,EAAMkC,KAAKsB,MAAMxD,GAkBbsD,EAjBGpB,KAAKsB,MAAMtB,KAAKuB,UAAYzD,EAAMC,IAAQA,GAmB5CpD,EAAcf,UAAUC,OAAS,GAA4B,GAAvBc,EAAcI,QACrDnB,EAAY,CACR,CAAEO,aAAc,2DAA4DE,QAAS,GAAIQ,QAAS,KAUtG,6BACI,kBAAC,EAAD,CAAeX,SAAUN,EAAUwH,OCxBhCI,EAZS,SAAChF,GAErB,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCKGiF,G,OARH,WACV,OACE,yBAAK1E,UAAU,OACd,kBAAC,EAAD,SCCe2E,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,aCPAC,EAAmBC,sBAAY3G,EAAiB4G,iCAEtDC,IAASC,OAAQ,kBAAC,IAAD,CAAUC,MAAOL,GAClC,kBAAC,EAAD,OAEEpD,SAAS0D,eAAe,SD2HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.4ba72136.chunk.js","sourcesContent":["import questionSource from '../interfaces/questionSource';\r\nimport questionStateInterface from '../interfaces/questionState';\r\nimport question from '../interfaces/question';\r\nimport { Icon, Message } from 'rsuite';\r\nimport largeSample from '../components/questionImport/largeSample';\r\nimport {useSelector, useDispatch } from 'react-redux';\r\nimport React from 'react';\r\nimport fs from \"fs\";\r\n\r\n\r\n\r\ntype params = {\r\n    type:string,\r\n    payload:any\r\n}\r\n\r\nconst parseFile = (file:string):questionSource => {\r\n\r\n\r\n\r\n    let lines = file.split('\\n');\r\n    let questions:questionSource = {questions:[]};\r\n    let length = lines.length;\r\n    let qflag = false;\r\n    let aflag = false;\r\n    let eflag = false;\r\n    let aline = 0;\r\n\r\n    let question:question = {\r\n        questionText:'',\r\n        correctAnswer:0,\r\n        answers: []\r\n    };;\r\n\r\n    for(var i = 0; i < length; i+=1){\r\n\r\n        if (lines[i].substr(0,1) != \"*\") {\r\n        switch(lines[i].substr(0,2).toUpperCase()) {\r\n            case \"@Q\":\r\n                if (question.correctAnswer != 0 && question.answers.length > 0 && question.questionText != '') {\r\n                    questions.questions.push(question);\r\n                }\r\n\r\n                 question = {\r\n                    questionText:'',\r\n                    correctAnswer:0,\r\n                    answers: []\r\n                };\r\n\r\n                qflag = true;\r\n                aflag = false;\r\n                eflag = false;\r\n\r\n                break;\r\n            case \"@A\":\r\n                aline = 0;\r\n                qflag = false;\r\n                aflag = true;\r\n                eflag = false;\r\n                break;\r\n            case \"@E\":\r\n                qflag = false;\r\n                aflag = false;\r\n                eflag = true;\r\n                break;\r\n            default:\r\n                if (qflag){\r\n                    question.questionText = question.questionText + \"\\n\" + lines[i];\r\n                } else if (aflag) {\r\n                    if (aline == 0) {\r\n                        question.correctAnswer = (Number(lines[i])-1);\r\n                        aline = 1;\r\n                    } else {\r\n                        question.answers.push(lines[i])\r\n\r\n                    }\r\n\r\n                } else if (eflag) {\r\n                    questions.questions.push(question);\r\n                    question = {\r\n                        questionText:'',\r\n                        correctAnswer:0,\r\n                        answers: []\r\n                    };\r\n                    eflag = false;                }\r\n\r\n                break;\r\n\r\n        }\r\n    }\r\n\r\n\r\n    }\r\n\r\n\r\n   return questions;\r\n}\r\n\r\n\r\nlet qinit:question[] = [];\r\nconst questionState:questionStateInterface = {\r\n    questions:qinit,\r\n    attempted:0,\r\n   correct:0,\r\n   lastQuestion:false,\r\n   begin:false,\r\n   timeleft:600,\r\n   questionsleft:10,\r\n   qcomplete:false,\r\n   questionEl:10,\r\n   timerEl:10\r\n\r\n\r\n}\r\n\r\n\r\n\r\n\r\nexport function questionReducer(\r\n    state:questionStateInterface = questionState,\r\n    action: params\r\n  ): questionStateInterface {\r\n\r\n    let qmcor = localStorage.getItem(\"qmcorrect\");\r\n    let qmtotal = localStorage.getItem(\"qmtotal\");\r\n\r\n\r\n\r\n\r\n\r\n    switch (action.type) {\r\n        case \"updateTimer\":\r\n            return { ...state, timerEl:action.payload, timeleft: (action.payload * 60) }\r\n        break;\r\n        case \"updateQuestions\":\r\n            return { ...state, questionEl:action.payload, questionsleft: action.payload }\r\n        break;\r\n        case \"startQuiz\" :\r\n            return { ...state, questionsleft: state.questionEl, timeleft:(state.timerEl * 60), lastQuestion:false,  begin:true, qcomplete:false }\r\n        break;\r\n        case \"restartQuiz\":\r\n            console.log(\"RESTARTING QUIZ\");\r\n            return { ...state, correct: 0,lastQuestion:false, attempted:0, begin: false, qcomplete:false }\r\n            break;\r\n        case \"completeQuiz\":\r\n            return { ...state, lastQuestion: false, begin: false, qcomplete: true }\r\n            break;\r\n        case \"fileSelected\":\r\n\r\n            let questions = parseFile(action.payload);\r\n\r\n            return {...state,attempted:0, correct:0, questions:questions.questions}\r\n        break;\r\n        case \"questionAnswered\":\r\n\r\n\r\n            let correct = 0;\r\n            let lastQuestion = {\r\n                  message: <Message type=\"error\" title=\"Sorry\" description={\"Corect answer was:  \"+action.payload.correctAnswer} />\r\n            };\r\n            if (action.payload.type == 'correct') {\r\n                correct = 1;\r\n\r\n                if (qmcor != null) {\r\n                    localStorage.setItem(\"qmcorrect\", (parseInt(qmcor) + 1).toString())\r\n                } else {\r\n                    localStorage.setItem(\"qmcorrect\", \"1\");\r\n\r\n                }\r\n\r\n\r\n                lastQuestion.message = <Message type=\"success\" title=\"Correct\" description={\"Great Job!\"} />\r\n            }\r\n\r\n\r\n\r\n\r\n            if (qmtotal != null) {\r\n                localStorage.setItem(\"qmtotal\", (parseInt(qmtotal) + 1).toString())\r\n            } else {\r\n                localStorage.setItem(\"qmtotal\", \"1\")\r\n            }\r\n            let ltcorrect = localStorage.getItem(\"qmcorrect\");\r\n            let lttotal = localStorage.getItem(\"qmtotal\");\r\n            let begin = true;\r\n            let qcomplete = false;\r\n            if (state.questionsleft < 2) {\r\n                begin = false;\r\n                qcomplete = true;\r\n            }\r\n\r\n            return { ...state,begin:begin, qcomplete:qcomplete, questionsleft: (state.questionsleft - 1), lastQuestion:lastQuestion, attempted:state.attempted +1, correct:state.correct +correct }\r\n      default:\r\n        return state\r\n    }\r\n  }\r\n\r\n\r\n\r\n    export default questionReducer;\r\n","import React from 'react'\r\nimport largeSample from './largeSample';\r\nimport question from '../../interfaces/question';\r\nimport questionSource from '../../interfaces/questionSource';\r\nimport {useSelector, useDispatch } from 'react-redux';\r\n\r\nconst QuestionImport = (props:any) => {\r\n    const questionState = useSelector(state => state);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n   \r\n\r\n  /*\r\n    let ret = questionState.questions.map(element => {\r\n       \r\n      return <div>{element.questionText}</div>\r\n        \r\n    });\r\n */\r\n\r\n    return (\r\n        <div>\r\n             </div>\r\n    )\r\n}\r\n\r\nexport default QuestionImport;\r\n","import React, {useRef} from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport { Nav, Navbar, Icon, Dropdown, InputNumber, Grid, Row, Col, Button } from 'rsuite';\nimport 'rsuite/dist/styles/rsuite-default.css';\n\n\nexport default function QuizOptions() {\n  const questionState: any = useSelector(state => state);\n  const dispatch = useDispatch();\n  const timerEl = useRef(null);\n  const questionsEl = useRef(null);\n\n  const updateTimer = ()=>{\n\n  }\n\n  const updateQuestions = ()=>{\n\n  }\n\n  return (<div className='qmOptions'>\n      <Grid fluid>\n        <Row className=\"show-grid\">\n          <Col xs={24} sm={24} md={8}>\n          <InputNumber onChange={(e) => {\n\n            dispatch({ type: \"updateTimer\", payload: e})}\n\n            }  ref={timerEl} prefix={'Time Limit'} postfix={'minutes'} defaultValue={questionState.timerEl} max={1000} min={1} step={5} />\n          </Col>\n          <Col xs={24} sm={24} md={8}>\n          <InputNumber onChange={(e) =>{\n\n             dispatch({ type: \"updateQuestions\", payload: e })}\n\n          }\n\n            ref={questionsEl} prefix={'Ask'} postfix={'questions'} value={questionState.questionEl} max={10000} min={1} step={1} />\n          </Col>\n          <Col xs={24} sm={24} md={8}>\n          <Button onClick={()=>{\n            dispatch({ type: 'startQuiz', payload: { time: '0', questions: '0' }});\n          }} color='green'>Start Quiz!</Button>\n          </Col>\n        </Row>\n      </Grid>\n    </div>\n  )\n}\n","import React from 'react'\r\nimport {useSelector, useDispatch } from 'react-redux';\r\nimport {Nav, Navbar, Icon, Dropdown,  Grid, Row, Col, Button} from 'rsuite';\r\nimport 'rsuite/dist/styles/rsuite-default.css';\r\nimport QuizOptions from '../quizOptions/quizOptions';\r\n\r\n\r\nconst ScoreBar = (props) => {\r\n\r\n    const questionState:any = useSelector(state => state);\r\n    const dispatch = useDispatch();\r\n\r\n    const loadFile = () => {\r\n        var input = document.createElement('input');\r\n        input.type = 'file';\r\n        input.onchange = (e:any)=>{\r\n\r\n            let reader = new FileReader();\r\n            reader.readAsText(e.target.files[0]);\r\n\r\n            reader.onload=(e:any)=>{\r\n\r\n                dispatch({type:'fileSelected',payload:e.target.result});\r\n            };\r\n\r\n\r\n          //\r\n        };\r\n        input.click();\r\n\r\n    }\r\n\r\n\r\n\r\n    if (localStorage.getItem(\"qmcorrect\") == null) {\r\n        localStorage.setItem(\"qmcorrect\",'0');\r\n    }\r\n    if (localStorage.getItem(\"qmtotal\") == \"NaN\") {\r\n        localStorage.setItem(\"qmtotal\", '0');\r\n    }\r\n\r\n\r\n\r\n    let quizOp = <div />;\r\n    let restart = <div />;\r\n    if (questionState.questions.length > 0 && questionState.begin == false) {\r\n        quizOp = <QuizOptions />;\r\n    }\r\n    if (questionState.questions.length > 0 && questionState.begin == true) {\r\n        restart = <Button onClick={(e) =>{\r\n\r\n            dispatch({ type: 'restartQuiz', payload: false });\r\n\r\n        }}>Restart Quiz</Button>;\r\n    };\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Grid fluid>\r\n                <Row className=\"qmHeader\">\r\n                <Col  xs={3}><img className='qmLogo' src='qmlogo.png'></img></Col>\r\n\r\n                    <Col xs={9}>Current Score: {questionState.correct}/{questionState.attempted} -- Lifetime Score: {localStorage.getItem(\"qmcorrect\")} / {localStorage.getItem(\"qmtotal\")} </Col>\r\n                    <Col xs={3} ><Button onClick={(e) => loadFile()}>Load Question File</Button> </Col>\r\n                    <Col xs={3} >{restart}  </Col>\r\n                </Row>\r\n                <Row>\r\n                    {quizOp}\r\n                </Row>\r\n            </Grid>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ScoreBar\r\n\r\n","import React from 'react'\nimport { useSelector, useDispatch } from 'react-redux';\nimport Countdown from 'react-countdown';\nimport {Message} from 'rsuite';\n\nexport default function QuizTimer() {\n    const questionState: any = useSelector(state => state);\n  const dispatch = useDispatch();\n  const [counter, setCounter] = React.useState(questionState.timeleft);\n    React.useEffect(() => {\n      if (counter > 0 && questionState.begin) {\n         setTimeout(() => setCounter(counter - 1), 1000);\n      } else {\n        dispatch({ type: \"completeQuiz\", payload: null })\n      }\n\n\n\n\n\n    }, [counter]);\n  return (\n    <div>\n      <Message\n        type=\"info\"\n        title=\"Time Left\"\n        description={\n          <p >\n            <div style={{ fontSize: '30px' }}>{Math.round((counter / 60) * 10) / 10} minutes</div>\n\n          </p>\n        }\n      />\n\n\n    </div>\n  )\n}\n","import React from 'react'\nimport useWindowSize from 'react-use/lib/useWindowSize'\nimport { useSelector, useDispatch } from 'react-redux';\nimport Confetti from 'react-confetti'\n\n\nexport default function QuizResults() {\n  const questionState: any = useSelector(state => state);\n  const { width, height } = useWindowSize()\n  return (\n    <div>\n      <Confetti\n      recycle={false}\n        width={width}\n        height={height}\n      />\n      <div style={{fontSize:\"40px\"}}>Quest Complete!</div>\n\n      Your Score: {questionState.correct}/{questionState.attempted}\n      <div style={{ fontSize: \"30px\", fontWeight:\"bold\" }}> {(Math.round((questionState.correct / questionState.attempted) * 10) * 10)}%</div>\n    </div>\n  )\n}\n","import React, {useRef} from 'react'\r\nimport {useSelector, useDispatch } from 'react-redux';\r\nimport {ButtonGroup, Button, Grid, Col, Row, Panel, PanelGroup } from 'rsuite';\r\nimport QuizTimer from '../quizTimer/QuizTimer';\r\nimport QuizResults from '../../quizResults/QuizResults';\r\n\r\nconst QuestionPanel = (props) => {\r\n    const questionState:any = useSelector(state => state);\r\n    const dispatch = useDispatch();\r\n\r\n\r\n    console.log(props.question);\r\n    let qtext = props.question.questionText.split('\\n').map((item, i) => {\r\n        return <p key={i}>{item}</p>;\r\n    });\r\n\r\n    let feedback = <div />;\r\n    let timer = <div />;\r\n    let score = <div />\r\n    if (questionState.lastQuestion && questionState.begin == true) {\r\n        feedback = <div>{questionState.lastQuestion.message}</div>;\r\n        timer = <QuizTimer />\r\n    }\r\n\r\n    if (questionState.begin == false && questionState.qcomplete) {\r\n        score = <QuizResults />\r\n    }\r\n\r\n\r\n    let ablocks = props.question.answers.map((e, i)=>{\r\n        let payload = {\r\n            type:'incorrect',\r\n            correctAnswer: props.question.answers[props.question.correctAnswer]\r\n        }\r\n        if (i == props.question.correctAnswer) {\r\n            payload.type = 'correct';\r\n        }\r\n    return <Col key={i}><Panel className='answerPanel' shaded key={i}  onClick={(e)=>dispatch({type:'questionAnswered',payload:payload})}>{e}</Panel></Col>\r\n    });\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <Panel >\r\n            {timer}\r\n            {feedback}\r\n            {score}\r\n                <span className='questionText'>\r\n            {qtext}\r\n            </span>\r\n            <Grid>\r\n                    <Row>\r\n                      {ablocks}\r\n                    </Row>\r\n                </Grid>\r\n\r\n            </Panel>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuestionPanel;\r\n\r\n","import React from 'react'\r\nimport {useSelector, useDispatch } from 'react-redux';\r\nimport questionStateInterface from '../../interfaces/questionState';\r\nimport QuestionPanel from '../questionPanel/questionPanel';\r\n\r\n\r\nfunction getRandomInt(min, max) {\r\n    min = Math.ceil(min);\r\n    max = Math.floor(max);\r\n    return Math.floor(Math.random() * (max - min)) + min; //The maximum is exclusive and the minimum is inclusive\r\n  }\r\n\r\n\r\nconst QuestionList = () => {\r\n    const dispatch = useDispatch();\r\n    const questionState:any = useSelector(state => state);\r\n\r\n\r\n    let questions = [\r\n        {questionText:\"Please load a question file\", answers:[], correct:0}\r\n    ];\r\n\r\n\r\n    let rnum = 0;\r\n    if (questionState.questions.length > 0 && questionState.begin) {\r\n        questions = questionState.questions;\r\n        rnum = getRandomInt(0, questionState.questions.length)\r\n    }\r\n     if (questionState.questions.length > 0 && questionState.begin == false) {\r\n        questions = [\r\n            { questionText: \"Select your quiz options and press the start quiz button\", answers: [], correct: 0 }\r\n        ];\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n\r\n    return (\r\n        <div>\r\n            <QuestionPanel question={questions[rnum]}></QuestionPanel>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default QuestionList;\r\n","import React from 'react'\r\nimport QuestionImport from '../questionImport/questionImport';\r\nimport ScoreBar from '../scoreBar/scoreBar';\r\nimport QuestionList from '../questionList/questionList';\r\n\r\nconst QuestionDisplay = (props) => {\r\n  \r\n    return (\r\n        <div>\r\n            <ScoreBar />\r\n            <QuestionImport></QuestionImport>\r\n            <QuestionList></QuestionList>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nexport default QuestionDisplay\r\n\r\n","import React from 'react';\nimport logo from './logo.svg';\nimport QuestionImport  from './components/questionImport/questionImport';\nimport QuestionDisplay from './components/questionDisplay/questionDisplay'\nimport './App.css';\n\n\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n     <QuestionDisplay></QuestionDisplay>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport questionReducer from './reducers/questionReducer';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { composeWithDevTools } from 'redux-devtools-extension';\n\n\nconst questMasterStore = createStore(questionReducer, composeWithDevTools());\n\nReactDOM.render( <Provider store={questMasterStore}>\n<App />\n</Provider>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}